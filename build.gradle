buildscript {
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id "org.sonarqube" version "4.3.0.3225"
}

group = 'se.ton'
version = '0.0.1'

java {
    sourceCompatibility = '11'
}

repositories {
    mavenCentral()
}

dependencies {
    //web
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //db
    runtimeOnly 'com.h2database:h2:1.4.199'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    // swagger ('/swagger-ui/index.html')
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

    // log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

jib {
    from.image = "adoptopenjdk/openjdk11:jre-11.0.10_9-alpine"
    to.image = "ghcr.io/giggle-projects/spring-secure-hackathon"
    to.tags = ["latest"]
    // ./gradlew jib
}

tasks.named('test') {
    useJUnitPlatform()
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

bootJar {
    enabled = true
}

jar {
    enabled = false
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "admin"
        property "sonar.password", "0520"
        property "sonar.sources", "src"
        property "sonar.language", "java" // 분석을 Java로 제한
        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.exclusions", "**/*Test*.*, **/Q*.JAVA"
//        property "sonar.test.inclusions", "**/*Test.groovy, **/*Test.java"
//        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
//        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
//        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
//        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/coverageReport/coverageReport.xml"    // Test Coverage Report 생성한 경우 사용
//        property 'sonar.exclusions', 'com/xxx/**/*_.java,com/**/QMyEntity.java,....'
    }
}